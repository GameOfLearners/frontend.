{"version":3,"sources":["Components/myNavbar.js","Components/FetchTestData.js","Components/Test.js","Components/myCard.js","App.js","serviceWorker.js","index.js"],"names":["Navbar1","useState","isOpen","setIsOpen","className","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","aria-label","rel","title","id","height","data-name","xmlns","viewBox","width","fill","d","ButtonDropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","FetchTestData","src","Component","ModalExample","props","buttonLabel","modal","setModal","toggle","Form","inline","onSubmit","e","preventDefault","Button","Modal","ModalHeader","ModalBody","ModalFooter","Example","Row","Col","sm","Card","body","CardTitle","CardText","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.54101a47.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  DropdownToggle,\r\n  ButtonDropdown\r\n} from 'reactstrap';\r\nimport './myNavbar.css'\r\n\r\nconst Navbar1 = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div className = \"container-fluid\">\r\n      <Navbar color=\"\" light expand=\"md\">\r\n        <NavbarBrand href=\"/\">Mizizi</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/components/\">About Us</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href= \"\">Services</NavLink>\r\n            </NavItem>\r\n            \r\n          </Nav>\r\n              <div className=\"nav justify-content-center\">\r\n                 \r\n                  <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" aria-label=\"Mizizi on twitter\" rel=\"noopener\" href=\"https://twitter.com/TeamMizizi?s=09\" title=\"Twitter\">\r\n                    <svg id=\"twitter-logo\" height=\"24\" data-name=\"Logo\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 400 400\">\r\n                      <rect width=\"400\" height=\"400\" fill=\"none\"/>\r\n                      <path d=\"M153.62,301.59c94.34,0,145.94-78.16,145.94-145.94,0-2.22,0-4.43-.15-6.63A104.36,104.36,0,0,0,325,122.47a102.38,102.38,0,0,1-29.46,8.07,51.47,51.47,0,0,0,22.55-28.37,102.79,102.79,0,0,1-32.57,12.45,51.34,51.34,0,0,0-87.41,46.78A145.62,145.62,0,0,1,92.4,107.81a51.33,51.33,0,0,0,15.88,68.47A50.91,50.91,0,0,1,85,169.86c0,.21,0,.43,0,.65a51.31,51.31,0,0,0,41.15,50.28,51.21,51.21,0,0,1-23.16.88,51.35,51.35,0,0,0,47.92,35.62,102.92,102.92,0,0,1-63.7,22A104.41,104.41,0,0,1,75,278.55a145.21,145.21,0,0,0,78.62,23\" fill=\"#fff\"/>\r\n                    </svg>\r\n                  </a>\r\n                  </li>\r\n               </div>\r\n            <ButtonDropdown className=\"dropDwn\">\r\n                <DropdownToggle className=\"dropTog\" caret>\r\n                \r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                  <DropdownItem>Dropdown Link</DropdownItem>\r\n                  <DropdownItem>Dropdown Link</DropdownItem>\r\n                </DropdownMenu>\r\n            </ButtonDropdown>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar1;","\r\nimport React, { Component } from \"react\";\r\n//eslint-disable-next-line\r\nimport { Alert } from 'reactstrap';\r\n\r\nexport default class FetchTestData extends Component {\r\n\r\n    render() {\r\n       \r\n        return (\r\n            <div>\r\n                <iframe title=\"unique\" className=\"myFrame\" src='https://webchat.botframework.com/embed/mzizi1-bot?s=p3GWnEQYvtU.hzyWfpCY7xwBpFkriUiRIkLraFyB3J8WOTDjpOpJIt8'></iframe>\r\n            </div>\r\n        );\r\n            }\r\n    }\r\n","import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form } from 'reactstrap';\r\n\r\nimport FetchTestData from './FetchTestData';\r\nconst ModalExample = (props) => {\r\n    const {\r\n      buttonLabel,\r\n    } = props;\r\n  \r\n    const [modal, setModal] = useState(false);\r\n  \r\n  \r\n    const toggle = () => setModal(!modal);\r\n    \r\n  \r\n    return (\r\n        <div>\r\n            <div className=\"startBtn\">\r\n                <Form inline onSubmit={(e) => e.preventDefault()}>\r\n                    {' '}\r\n                    <Button color=\"link\" onClick={toggle}>Start>>{buttonLabel}</Button>\r\n                </Form>\r\n            </div>\r\n\r\n            <Modal isOpen={modal} toggle={toggle} className=\"myMod\" >\r\n                <ModalHeader toggle={toggle}>Welcome to Mizizi!! Test your knowledge</ModalHeader>\r\n                <ModalBody>\r\n                    <FetchTestData />\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    \r\n                    <Button color=\"primary\" onClick={toggle}>I'm Done!</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModalExample;","import React from 'react';\r\nimport { Card, Button, CardTitle, CardText, Row, Col } from 'reactstrap';\r\nimport ModalExample from './Test';\r\n//test change\r\n\r\n\r\nconst Example = (props) => {\r\n  return (\r\n    \r\n      <Row>\r\n        <Col sm=\"4\">\r\n          <div className=\"app-name\">\r\n            <h3><strong>Mizizi</strong></h3>\r\n            <p><i>Your Medical Partner</i></p>\r\n        </div>\r\n        </Col>\r\n        \r\n        <Col sm=\"4\">\r\n        <div className=\"cards-feel\">\r\n          <Card body>\r\n            <CardTitle><strong>DID YOU KNOW?</strong></CardTitle>\r\n            <CardText>\r\n            Your skin works hard. Not only is it the largest organ in the body, but it defends against disease and infection, \r\n            regulates your temperature and aids in vitamin production.\r\n            </CardText>\r\n            <Button>Learn More>></Button>\r\n          </Card>\r\n          </div>\r\n        </Col>\r\n\r\n        <Col sm=\"4\">\r\n        <div className=\"cards-feel\">\r\n          <Card body>\r\n            <CardTitle><strong>TEST YOUR KNOWLEDGE?</strong></CardTitle>\r\n            <CardText>\r\n            <CardText>\r\n            Do you want to test how much general knowledge you have on how to maintain good health? Test your knowledge now!!.\r\n            </CardText>\r\n            <ModalExample /></CardText>\r\n            \r\n          </Card>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n   \r\n  );\r\n};\r\n\r\nexport default Example;","import React from 'react';\r\nimport Navbar1 from './Components/myNavbar';\r\nimport Example from './Components/myCard';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n \r\n  return (\r\n  <div className=\"App\">\r\n    <Navbar1 />\r\n    <Example />\r\n  </div>   \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}